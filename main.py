from aiogram import Dispatcher, Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
from model import answer_question

bot = Bot('7670368440:AAFHkJEP3WkMj8NabxjzHfackMnJ-6XqHR4')
dp = Dispatcher()

class Form(StatesGroup):
    state_generate = State()

async def main():
    await dp.start_polling(bot)

@dp.message(Command('start'))
async def start(msg: Message):
    await msg.answer("""
–ü—Ä–∏–≤–µ—Çüëã
–Ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üó£
–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç...                     
""")

@dp.message()
async def callback_text(msg: Message, state: FSMContext):
    text = msg.text
    try:
        if len(text) <= 2000:
            data = await state.get_state()
            if data is None:
                await state.set_state(Form.state_generate)
                deleted_msg = await msg.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ üîÑ")
                returned_text = answer_question(text)#–ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await deleted_msg.delete()
                await msg.reply(returned_text)#–≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏
                await state.clear()
            else:
                await msg.reply("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞...")
        else:
            await msg.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤‚ùóÔ∏è")
    except:
        await msg.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞‚ùóÔ∏è")

if __name__ == '__main__':
    asyncio.run(main())